/* eslint-disable @next/next/link-passhref */
/* eslint-disable react/no-array-index-key */
import Image from 'next/image';
import Link from 'next/link';
import clsx from 'clsx';
import React, { ChangeEvent } from 'react';
import styles from './Bay.module.scss';
import Head from 'next/head';
import moment from 'moment';
import { CurrencyUtils } from 'src/utils';
import { Button, Container, Grid, TextInput } from 'src/components';
import LogoIcon from '../../../public/icons/icon-74x68.png';
import MetamaskIcon from '../../../public/icons/metamask-icon-54x56.png';
import ReactTooltip from 'react-tooltip';
import colors from '../../styles/colors.module.scss';
import useFormValidation from 'src/hooks/useFormValidation';
import ButtonSize from 'src/constants/buttonConstant';
import TextAlign from 'src/constants/textAlign';
import ButtonVariant from 'src/constants/buttonVariant';
import TextInputVariant from 'src/constants/textInputVariant';
import GridItem from 'src/components/GridItem';
import ContainerSize from 'src/constants/containerSize';
import useTokenInfo from 'src/hooks/useTokenInfo';
import { addToken } from 'src/states/wallet/slice';
import { useDispatch } from 'react-redux';
import { useAppSelector } from 'src/states/hooks';
import NumberUtils from 'src/utils/number';
import useActiveWeb3React from 'src/hooks/useActiveWeb3React';

const ImageLoader = ({
  src,
  width,
  quality,
}: {
  src: string;
  width: number;
  quality: number;
}) => `${src}?w=${width}&q=${quality || 75}`;

const RowItem = ({ label, content }: { label: string; content: any }) => (
  <div className={styles.rowItem}>
    <h3 className={styles.metaLabel}>{label}</h3>
    <p className={styles.metaContent}>{content}</p>
  </div>
);

export enum LeftSidedContainerTab {
  Proposals = 'Proposals',
  Members = 'Members',
  Portfolio = 'Portfolio',
}

const Bay = ({
  slug,
  selectedTab,
  children,
}: {
  slug: string;
  children: React.ReactNode;
  selectedTab: LeftSidedContainerTab;
}) => {
  const dispatch = useDispatch();
  const { formValues, handleSetFieldValue } = useFormValidation({
    stakedAmount: '',
    searchProposalInput: '',
  });
  const { account } = useActiveWeb3React();
  const walletSlice = useAppSelector((state) => state.walletSlice);
  const tokenInfo = useTokenInfo('OBAY');

  React.useEffect(() => {
    if (tokenInfo) {
      dispatch(addToken(tokenInfo));
    }
  }, [tokenInfo]);

  const mockBayInfo = [
    {
      label: 'Total Fund',
      content: `${CurrencyUtils.formatByUnit(1521000, 'USD')} USD`,
    },
    {
      label: 'Member',
      content: 120,
    },
    {
      label: 'Created at',
      content: moment().format('DD-MM-YYYY'),
    },
  ];

  const handler = {
    Stake: () => {},
    Leave: () => {},
    SearchProposal: () => {},
    ChangeSearchProposalInput: (e: ChangeEvent) => {
      handleSetFieldValue('searchProposalInput', (e.target as any).value);
    },
    ChangeStakedAmount: (e: ChangeEvent) => {
      handleSetFieldValue('stakedAmount', (e.target as any).value, {
        isNumeric: true,
      });
    },
  };

  /** Render meta information of a bay */
  const RenderMetaContainer = React.memo(() => (
    <div className={styles.metaContainer}>
      <Image
        loader={ImageLoader as any}
        src="https://images.cointelegraph.com/images/1434_aHR0cHM6Ly9zMy5jb2ludGVsZWdyYXBoLmNvbS9zdG9yYWdlL3VwbG9hZHMvdmlldy81YTc5NDA0YjQ2ZTYyNWFhYTFkYTBhNDJlMmU4Y2JiYy5qcGc=.jpg"
        alt={slug as string}
        width={2250}
        height={1390}
        layout="responsive"
      />
      <br />
      <h1 className={styles.bayName}>{slug}</h1>
      <p
        data-tip={account}
        data-for="address-tooltip"
        data-place="bottom"
        className={styles.bayAddress}
      >
        {`${account?.substring(0, 30).trim()}...`}
      </p>

      {mockBayInfo.map(({ content, label }) => (
        <RowItem key={label} label={label} content={content} />
      ))}
    </div>
  ));

  return (
    <div>
      <Head>
        <title>{(slug as string)?.toUpperCase()}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container size={ContainerSize.ExtraLarge}>
        <div className={styles.container}>
          <Grid
            cols={{
              xs: 1,
              md: 2,
              lg: 7,
            }}
            rows={{
              xs: 1,
              md: 1,
              lg: 1,
            }}
            rowGap="xs"
            colGap="md"
          >
            <GridItem rowSpan={1} colSpan={2}>
              <div className={clsx(styles.bayInfoInner, styles.subContainer)}>
                <RenderMetaContainer />
                <div className={styles.separator} />

                {account && walletSlice.data.tokens.OBAY ? (
                  <>
                    <div className={styles.bottomContainer}>
                      <div className={styles.rowItem}>
                        <p
                          data-tip={account}
                          data-for="address-tooltip"
                          data-place="bottom"
                        >
                          <Image src={MetamaskIcon} width={15} height={15} />
                          <span style={{ marginLeft: 10 }}>{`${account
                            .substring(0, 10)
                            .trim()}...`}</span>
                        </p>
                        <div style={{ alignItems: 'center' }}>
                          <span>
                            {NumberUtils.truncate(
                              walletSlice.data.tokens.OBAY.balance,
                              3
                            )}{' '}
                          </span>
                          <Image src={LogoIcon} width={15} height={15} />
                        </div>
                      </div>
                      <TextInput
                        hasButton
                        variant={TextInputVariant.filled}
                        borderWidth={1}
                        backgroundColor={colors.$dark500}
                        placeholder="Enter the amount"
                        placeholderStyle={{
                          color: 'white',
                        }}
                        buttonClassName={styles.inputButton}
                        buttonText="Stake"
                        onButtonClicked={handler.Stake}
                        onValueChanged={handler.ChangeStakedAmount}
                        value={formValues.stakedAmount}
                      />
                      <div className={styles.rowItem}>
                        <div className={styles.metaLabel}>Total</div>
                        <p className={styles.metaContent}>{0.00005867} OBAY</p>
                      </div>
                    </div>
                    <Button
                      backgroundColor="#303030"
                      borderWidth={1.5}
                      color="white"
                      variant={ButtonVariant.filled}
                      size={ButtonSize.full}
                      textAlign={TextAlign.center}
                      paddingVertical={10}
                      onClick={handler.Leave}
                    >
                      Leave the bay
                    </Button>
                  </>
                ) : (
                  <div
                    style={{
                      display: 'flex',
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}
                  >
                    <div
                      style={{
                        height: 250,
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        flexDirection: 'column',
                        color: colors.dark500,
                      }}
                    >
                      <p style={{ fontSize: 55, margin: 0 }}>â˜»</p>
                      <p>Wallet is not connected</p>
                    </div>
                  </div>
                )}
              </div>
            </GridItem>
            <GridItem rowSpan={1} colSpan={5}>
              <div className={styles.subContainer}>
                <div className={styles.header}>
                  <div className={styles.header_left}>
                    {[
                      LeftSidedContainerTab.Proposals,
                      LeftSidedContainerTab.Members,
                      LeftSidedContainerTab.Portfolio,
                    ].map((tab) => (
                      <Link
                        key={tab}
                        href={`/my-bays/${slug}/${tab.toLowerCase()}`}
                      >
                        <div
                          className={clsx({
                            [styles.tab]: true,
                            [styles.tab_active]: selectedTab === tab,
                          })}
                        >
                          <p className={styles.tabText}>{tab}</p>
                        </div>
                      </Link>
                    ))}
                  </div>
                  <TextInput
                    hasButton
                    variant={TextInputVariant.outlined}
                    borderWidth={1}
                    backgroundColor={colors.dark500}
                    placeholder="Search for proposal"
                    placeholderStyle={{
                      color: 'white',
                    }}
                    buttonClassName={styles.inputButton}
                    buttonText="Search"
                    onButtonClicked={handler.SearchProposal}
                    onValueChanged={handler.ChangeSearchProposalInput}
                    value={formValues.searchProposalInput}
                  />
                </div>
                <div className={styles.subContainer_separator} />
                <div className={styles.meta}>
                  <div className={styles.meta_leftSide}>
                    <p>
                      Personal Return on Investment (PROI): <span>5%</span>
                    </p>
                  </div>
                  <div className={styles.meta_rightSide}>
                    <p>
                      Next run: <span>22: 10: 30</span>
                    </p>
                  </div>
                </div>
                {children}
              </div>
            </GridItem>
          </Grid>
        </div>
      </Container>
      <ReactTooltip
        id="address-tooltip"
        textColor={colors.dark0}
        backgroundColor={colors.dark800}
      />
    </div>
  );
};

export default Bay;
