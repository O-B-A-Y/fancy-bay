{
  "contractName": "TreasureExchangeChest",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exchangeProposals",
      "outputs": [
        {
          "internalType": "contract ExchangeProposal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeProposals\",\"outputs\":[{\"internalType\":\"contract ExchangeProposal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/features/dao/proposal/TreasureExchangeChest.sol\":\"TreasureExchangeChest\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2ebbbe6d0011175bd9e7268b83de3f9c2f9d8d4cbfbaef12aff977d7d727163\",\"dweb:/ipfs/Qmd5c7Vxtis9wzkDNhxwc6A2QT5H9xn9kfjhx7qx44vpro\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26e8b38a7ac8e7b4463af00cf7fff1bf48ae9875765bf4f7751e100124d0bc8c\",\"dweb:/ipfs/QmWcsmkVr24xmmjfnBQZoemFniXjj3vwT78Cz6uqZW1Hux\"]},\"project:/contracts/features/dao/proposal/ExchangeProposal.sol\":{\"keccak256\":\"0x2fcc7aa8989689781fc67439c365df53d9929e3c2a3e7be0cce9021b8d1876f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc93a9b69da7f602bc9696f9bbe143d60b3e1b50f3c2a1b27cd4fb31ffb7f45c\",\"dweb:/ipfs/QmZkzUogySYrngh7zAUHAr6bTnjuHyvexRyLQKSDe2GDuS\"]},\"project:/contracts/features/dao/proposal/Proposal.sol\":{\"keccak256\":\"0x91fc09f691385958b7030e6ce396eacc03630af364b24eeb8e8a8aa045da226e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e6560c625d13938a878edc9f87c4d33235d1b1fb3422f9dcde5d2cde422aef8\",\"dweb:/ipfs/QmZKfqHpQcC4dorsuYXJmyHFWy4YQn1PZ4TbsacEB2XMUb\"]},\"project:/contracts/features/dao/proposal/TreasureExchangeChest.sol\":{\"keccak256\":\"0x86cce712291ad142aac60ff5a21bf229f7a2003422700287005398ba1f1b33a5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d234f305566e46445daf3c92aba827b8912e14932e704a38269a91ce77dc034d\",\"dweb:/ipfs/QmNjFxLuRAVCL8cNHmyMyXtRJoXj1RRaf4UiWjnP7XcFS4\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060d28061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610602b5760e060020a60003504633b5b4f2c81146030575b600080fd5b603f603b3660046084565b605b565b604051600160a060020a03909116815260200160405180910390f35b60008181548110606a57600080fd5b600091825260209091200154600160a060020a0316905081565b600060208284031215609557600080fd5b503591905056fea264697066735822122079f041bf8b787dcef2024fd634b1ee460928b79c8df23a20d32df761418167b464736f6c63430008090033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b5060043610602b5760e060020a60003504633b5b4f2c81146030575b600080fd5b603f603b3660046084565b605b565b604051600160a060020a03909116815260200160405180910390f35b60008181548110606a57600080fd5b600091825260209091200154600160a060020a0316905081565b600060208284031215609557600080fd5b503591905056fea264697066735822122079f041bf8b787dcef2024fd634b1ee460928b79c8df23a20d32df761418167b464736f6c63430008090033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:429:25",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:25",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "84:110:25",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "130:16:25",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "139:1:25",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "142:1:25",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "132:6:25"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "132:12:25"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "132:12:25"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "105:7:25"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "114:9:25"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "101:3:25"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "101:23:25"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "126:2:25",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "97:3:25"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "97:32:25"
                  },
                  "nodeType": "YulIf",
                  "src": "94:52:25"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "155:33:25",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "178:9:25"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "165:12:25"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "165:23:25"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "155:6:25"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "50:9:25",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "61:7:25",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "73:6:25",
                "type": ""
              }
            ],
            "src": "14:180:25"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "325:102:25",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "335:26:25",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "347:9:25"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "358:2:25",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "343:3:25"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "343:18:25"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "335:4:25"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "377:9:25"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "392:6:25"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "408:1:25",
                                    "type": "",
                                    "value": "2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "411:3:25",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "exp",
                                  "nodeType": "YulIdentifier",
                                  "src": "404:3:25"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "404:11:25"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "417:1:25",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "400:3:25"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "400:19:25"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "388:3:25"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "388:32:25"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "370:6:25"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "370:51:25"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "370:51:25"
                }
              ]
            },
            "name": "abi_encode_tuple_t_contract$_ExchangeProposal_$3139__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "294:9:25",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "305:6:25",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "316:4:25",
                "type": ""
              }
            ],
            "src": "199:228:25"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_contract$_ExchangeProposal_$3139__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(exp(2, 160), 1)))\n    }\n}",
      "id": 25,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "92:81:22:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "92:81:22:-:0;;;;;;;;;;;;;;;;;;-1:-1:-1;;;92:81:22;;;;;;;;;;;;127:43;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;388:32:25;;;370:51;;358:2;343:18;127:43:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;127:43:22;;-1:-1:-1;127:43:22;:::o;14:180:25:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:25;;14:180;-1:-1:-1;14:180:25:o",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0;\n\nimport \"./ExchangeProposal.sol\";\n\ncontract TreasureExchangeChest {\n  ExchangeProposal[] public exchangeProposals;\n}\n",
  "sourcePath": "/Users/chungquantin/Desktop/Projects/DecentralizedOpenSource/smart-bay/contracts/features/dao/proposal/TreasureExchangeChest.sol",
  "ast": {
    "absolutePath": "project:/contracts/features/dao/proposal/TreasureExchangeChest.sol",
    "exportedSymbols": {
      "Context": [
        774
      ],
      "ExchangeProposal": [
        3139
      ],
      "Ownable": [
        103
      ],
      "Proposal": [
        3432
      ],
      "TreasureExchangeChest": [
        3485
      ]
    },
    "id": 3486,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3479,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:22"
      },
      {
        "absolutePath": "project:/contracts/features/dao/proposal/ExchangeProposal.sol",
        "file": "./ExchangeProposal.sol",
        "id": 3480,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3486,
        "sourceUnit": 3140,
        "src": "58:32:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "TreasureExchangeChest",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 3485,
        "linearizedBaseContracts": [
          3485
        ],
        "name": "TreasureExchangeChest",
        "nameLocation": "101:21:22",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "3b5b4f2c",
            "id": 3484,
            "mutability": "mutable",
            "name": "exchangeProposals",
            "nameLocation": "153:17:22",
            "nodeType": "VariableDeclaration",
            "scope": 3485,
            "src": "127:43:22",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_contract$_ExchangeProposal_$3139_$dyn_storage",
              "typeString": "contract ExchangeProposal[]"
            },
            "typeName": {
              "baseType": {
                "id": 3482,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 3481,
                  "name": "ExchangeProposal",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3139,
                  "src": "127:16:22"
                },
                "referencedDeclaration": 3139,
                "src": "127:16:22",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_ExchangeProposal_$3139",
                  "typeString": "contract ExchangeProposal"
                }
              },
              "id": 3483,
              "nodeType": "ArrayTypeName",
              "src": "127:18:22",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_contract$_ExchangeProposal_$3139_$dyn_storage_ptr",
                "typeString": "contract ExchangeProposal[]"
              }
            },
            "visibility": "public"
          }
        ],
        "scope": 3486,
        "src": "92:81:22",
        "usedErrors": []
      }
    ],
    "src": "32:142:22"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/features/dao/proposal/TreasureExchangeChest.sol",
    "exportedSymbols": {
      "Context": [
        774
      ],
      "ExchangeProposal": [
        3139
      ],
      "Ownable": [
        103
      ],
      "Proposal": [
        3432
      ],
      "TreasureExchangeChest": [
        3485
      ]
    },
    "id": 3486,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3479,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:22"
      },
      {
        "absolutePath": "project:/contracts/features/dao/proposal/ExchangeProposal.sol",
        "file": "./ExchangeProposal.sol",
        "id": 3480,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3486,
        "sourceUnit": 3140,
        "src": "58:32:22",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "TreasureExchangeChest",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 3485,
        "linearizedBaseContracts": [
          3485
        ],
        "name": "TreasureExchangeChest",
        "nameLocation": "101:21:22",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "3b5b4f2c",
            "id": 3484,
            "mutability": "mutable",
            "name": "exchangeProposals",
            "nameLocation": "153:17:22",
            "nodeType": "VariableDeclaration",
            "scope": 3485,
            "src": "127:43:22",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_contract$_ExchangeProposal_$3139_$dyn_storage",
              "typeString": "contract ExchangeProposal[]"
            },
            "typeName": {
              "baseType": {
                "id": 3482,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 3481,
                  "name": "ExchangeProposal",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3139,
                  "src": "127:16:22"
                },
                "referencedDeclaration": 3139,
                "src": "127:16:22",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_ExchangeProposal_$3139",
                  "typeString": "contract ExchangeProposal"
                }
              },
              "id": 3483,
              "nodeType": "ArrayTypeName",
              "src": "127:18:22",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_contract$_ExchangeProposal_$3139_$dyn_storage_ptr",
                "typeString": "contract ExchangeProposal[]"
              }
            },
            "visibility": "public"
          }
        ],
        "scope": 3486,
        "src": "92:81:22",
        "usedErrors": []
      }
    ],
    "src": "32:142:22"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.9+commit.e5eed63a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-11-16T03:48:32.081Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}